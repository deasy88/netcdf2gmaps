<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" minWidth="500" minHeight="300" xmlns:maps="com.google.maps.*" backgroundColor="#FFFFFF" currentState="loading">
	<mx:Script>
		<![CDATA[
			import com.abdulqabiz.utils.QueryString;
			import com.google.maps.LatLng;
			import com.google.maps.LatLngBounds;
			import com.google.maps.MapEvent;
			import com.google.maps.MapMoveEvent;
			import com.google.maps.MapOptions;
			import com.google.maps.MapType;
			import com.google.maps.overlays.GroundOverlay;
			import com.google.maps.overlays.TileLayerOverlay;
			import com.greensock.TweenLite;
			import com.vizzuality.components.SliderThumbGmba;
			import com.vizzuality.maps.BasicLayer;
			import com.vizzuality.maps.RasterLayer;
			
			import entity.Entity;
			
			import flash.net.navigateToURL;
			
			import mx.core.BitmapAsset;
			import mx.events.SliderEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.http.mxml.HTTPService;
			
			[Embed("pixelbender/threshold3.pbj", mimeType="application/octet-stream")]
			private var RasterFilter:Class;	
			[Embed(source='pixelbender/gradient.png')]
			private var GradientImage:Class;
			private var gradientImg:BitmapData;
			
			private var rasterLayer:RasterLayer;
			private var rasterTileOverlay:TileLayerOverlay;     
			private var taxonRasterLayer:BasicLayer;	        	
			private var taxonRasterTileOverlay:TileLayerOverlay;   
			private var shader:Shader; 
			private var filter:ShaderFilter; 	
			public var model_id:String;
			
			public var currentGo:GroundOverlay;
			public var previousGo:GroundOverlay;
			
			public var metadata:Object;
			public var mapbounds:LatLngBounds;
			
			
			protected function map_mapevent_mappreinitializeHandler(event:MapEvent):void {
				
				this.stage.addEventListener(FullScreenEvent.FULL_SCREEN, fullScreenHandler);
				var opts:MapOptions = new MapOptions({mapType:MapType.SATELLITE_MAP_TYPE,center:new LatLng(20, 20),zoom:2});
				map.setInitOptions(opts);
			}
			
			
			
			
			protected function map_mapevent_mapreadyHandler(event:MapEvent):void {
				
				//try to get the metadata_file_url from parameters
				var qs:QueryString = new QueryString();
				
				if(qs.parameters.url!=null) { 
					var jsonService:HTTPService = new HTTPService();
					jsonService.url = qs.parameters.url;
					jsonService.addEventListener(ResultEvent.RESULT,onMetadataDownload,false,0,true);
					jsonService.send();	
				} else {
					currentState="metadata_url";
				}
				
						
				  /*
				createOverlay("1","0");
				
				
				if (metadata_file_url!=null) {
					currentState="";
				} else {
					currentState="metadata_url";
				} */
				
			}
			
			public function onMetadataDownload(event:ResultEvent):void {
				metadata = Entity.decodeJSON(event.result as String);
				
				
				//Now we can do something with the map
				//center to the map
				var llCorner:LatLng = new LatLng(metadata.bbox_miny,metadata.bbox_minx);
				var utCorner:LatLng = new LatLng(metadata.bbox_maxy,metadata.bbox_maxx);
				mapbounds = new LatLngBounds(llCorner,utCorner);
				map.setCenter(mapbounds.getCenter(),map.getBoundsZoomLevel(mapbounds));	
				
				//add metadata
				description_label.text = metadata.description;
				author_label.text = metadata.author;
				
				createOverlay(metadata.imagesOverlays[0]);
				currentState="";
				
			}
			

			public function onMetadataUrlProvided():void {
				currentState="loading";
				var jsonService:HTTPService = new HTTPService();
				jsonService.url = metadata_url_input.text;
				jsonService.addEventListener(ResultEvent.RESULT,onMetadataDownload,false,0,true);
				jsonService.send();	
			}
			
			
			
			
			
			
			
			
			public function createOverlay(url:String):void {
				previousGo = currentGo;
				var rl:Loader = new Loader();
				var go:GroundOverlay;
				rl.contentLoaderInfo.addEventListener(Event.COMPLETE, function(e:Event):void {
					go = new GroundOverlay(
						rl,
						mapbounds);
					go.foreground.alpha=0;
					map.addOverlay(go);
					TweenLite.to(go.foreground,0.3,{alpha:0.6});
					
					if(previousGo) {
						TweenLite.to(previousGo.foreground,0.5,{alpha:0,onComplete:onGoOut});
					}
					currentGo=go;
				});
				rl.load(new URLRequest(url));
			}
			
			public function onGoOut():void {
				map.removeOverlay(previousGo);				
			}
			
			public function sliderAltitude_changeHandler(event:SliderEvent):void {
				//createOverlay(percentageSlider.value.toString(),"0");
			}			
			
			
			
			public function fullScreenHandler(evt:FullScreenEvent):void {
				
				if (evt.fullScreen) {
					//fullScreenButton.setStyle("styleName","fullScreenIn");
				} else {
					//fullScreenButton.setStyle("styleName","fullScreenOut");
				}
			}	
			public function toggleFullScreen():void{
				try {
					switch (Application.application.stage.displayState) {
						case StageDisplayState.FULL_SCREEN:
							Application.application.stage.displayState = StageDisplayState.NORMAL;
							fullScreenButton.setStyle("styleName","fullScreenOut");
							break;
						default:
							Application.application.stage.displayState = StageDisplayState.FULL_SCREEN;
							fullScreenButton.setStyle("styleName","fullScreenIn");
							break;
					}
				} catch (err:SecurityError) {
					// ignore
					trace(err.message);
				}
			}				
			
				
			
			
			
			public var currentStep:Number=0;
			public var timer:Timer = new Timer(700);
			
			public function play(event:MouseEvent):void
			{
				timer.addEventListener(TimerEvent.TIMER,function(ev:TimerEvent):void {
					if(currentStep==metadata.imagesOverlays.length) {
						currentStep=0;
					}
					percentageSlider.value=currentStep;
					createOverlay(metadata.imagesOverlays[currentStep]);
					currentStep++;
				});
				timer.start();
			}
			
			public function stop(event:MouseEvent):void {
				timer.stop();
			}
			
		]]>
	</mx:Script>
	<mx:Style source="com/vizzuality/skin/style.css"/>
	<mx:states>
		<mx:State name="loading">
			<mx:AddChild position="lastChild">
				<mx:Canvas left="0" top="0" right="0" bottom="0" backgroundColor="#252525" backgroundAlpha="0.75">
					<mx:Label text="Loading..." horizontalCenter="0" verticalCenter="0" fontSize="20" color="#ECECEC"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
		<mx:State name="metadata_url">
			<mx:AddChild position="lastChild">
				<mx:Canvas left="0" top="0" right="0" bottom="0" backgroundColor="#252525" backgroundAlpha="0.85">
					<mx:Label text="Please enter the URL for the netCDF2gmaps metadata URL" color="#FFFFFF" fontSize="14" horizontalCenter="0" verticalCenter="-27"/>
					<mx:TextInput width="324" horizontalCenter="-24" verticalCenter="0" id="metadata_url_input" text="http://philip.brohan.org.netcdf2gmaps.s3.amazonaws.com/sample_images_1924_pressures/pressures.test2.json" fontStyle="italic" textDecoration="none"/>
					<mx:Button label="Go" color="#000000" horizontalCenter="166" verticalCenter="0" click="onMetadataUrlProvided()"/>
				</mx:Canvas>
			</mx:AddChild>
		</mx:State>
	</mx:states>
	<maps:Map id="map" 
			  key="ABQIAAAAtDJGVn6RztUmxjnX5hMzjRQiT4et8k-_xArSRRdlMMdNz4z1KBSlOiYWBlkQXeUrq54umkuZGMBTXg"
			  mapevent_mappreinitialize="map_mapevent_mappreinitializeHandler(event)" mapevent_mapready="map_mapevent_mapreadyHandler(event)"  top="0" bottom="60" left="0" right="0"/>
	<mx:Canvas id="sliderCanvas" backgroundColor="#232323" bottom="0" height="60" right="0" left="0" backgroundAlpha="1.0">
		<mx:HSlider id="percentageSlider" enabled="true" left="100" right="20" minimum="0" maximum="31" 
					showDataTip="false"  value="0"
					change="sliderAltitude_changeHandler(event)"
					thumbRelease="sliderAltitude_changeHandler(event)"
					thumbCount="1" liveDragging="true" 
					sliderThumbClass="{SliderThumbGmba}"
					showTrackHighlight="true" snapInterval="1" verticalCenter="-9"/>
		<mx:Label y="39" text="1" fontFamily="Roses are FF0000_8pt_st" color="#FFFFFF" left="20"/>
		<mx:Label y="39" text="31" fontFamily="Roses are FF0000_8pt_st" color="#FFFFFF" right="20"/>
		<mx:Button y="10" label="P" click="play(event)" left="5" width="37"/>
		<mx:Button y="10" label="S" click="stop(event)" left="45" width="37"/>
	</mx:Canvas>
	<mx:Button width="20" height="20" label="fullscreen" color="#FFFFFF" fontSize="14" fontWeight="normal" click="toggleFullScreen()"
			   useHandCursor="true" mouseChildren="false" buttonMode="true" styleName="fullScreenOut" id="fullScreenButton" enabled="true" right="10" top="60"/>
	<mx:Button styleName="btnZoomIn" height="24" top="60"
			   mouseChildren="false" buttonMode="true" useHandCursor="true" id="btnZoomIn" click="map.setZoom(map.getZoom()+1)" left="15" width="24"/>
	
	<mx:Button styleName="btnZoomOut" height="24" width="24" top="88"
			   mouseChildren="false" buttonMode="true" useHandCursor="true" id="btnZoomOut" click="map.setZoom(map.getZoom()-1)" left="15"/>
	<mx:Canvas y="0" height="52" backgroundColor="#000000" backgroundAlpha="0.75" left="0" right="0">
		<mx:Label x="10" y="10" text="Description" color="#FFFFFF" width="363" height="32" id="description_label"/>
		<mx:Label y="10" text="author" color="#FFFFFF" width="185" height="19" textAlign="right" id="author_label" right="10"/>
		<mx:Label y="30" text="more info" color="#FFFFFF" width="101" height="19" textAlign="right" textDecoration="underline" mouseChildren="false"  click="navigateToURL(new URLRequest(metadata.more_info_url));" right="10"/>
	</mx:Canvas>
	
	
</mx:Application>
